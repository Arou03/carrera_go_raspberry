import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
try:
    import torchvision
    import torchaudio
except:
    pass

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.conv2d_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(6,6), out_channels=16, padding=(2,2), padding_mode='zeros', stride=(2,2))
        self.conv2d_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=16, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_2 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=16, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=16, kernel_size=(1,1), out_channels=16, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_4 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=16, kernel_size=(3,3), out_channels=16, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_5 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=16, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_6 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_7 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_8 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_9 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_10 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_11 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_12 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_13 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_14 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_15 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_16 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_17 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_18 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_19 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_20 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_21 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_22 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_23 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_24 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_25 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_26 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_27 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_28 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_29 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_30 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_31 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_32 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_33 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_34 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_35 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_36 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_37 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_38 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_39 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_40 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_41 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_42 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_43 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_44 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_45 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_46 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_47 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_48 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_49 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_50 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_51 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_52 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_53 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_54 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_55 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_56 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_57 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=21, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_58 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=21, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_59 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=21, padding=(0,0), padding_mode='zeros', stride=(1,1))

        archive = zipfile.ZipFile('.\best.pnnx.bin', 'r')
        self.conv2d_0.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_0.bias', (16), 'float32')
        self.conv2d_0.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_0.weight', (16,3,6,6), 'float32')
        self.conv2d_1.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_1.bias', (32), 'float32')
        self.conv2d_1.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_1.weight', (32,16,3,3), 'float32')
        self.conv2d_2.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_2.bias', (16), 'float32')
        self.conv2d_2.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_2.weight', (16,32,1,1), 'float32')
        self.conv2d_3.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_3.bias', (16), 'float32')
        self.conv2d_3.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_3.weight', (16,16,1,1), 'float32')
        self.conv2d_4.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_4.bias', (16), 'float32')
        self.conv2d_4.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_4.weight', (16,16,3,3), 'float32')
        self.conv2d_5.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_5.bias', (16), 'float32')
        self.conv2d_5.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_5.weight', (16,32,1,1), 'float32')
        self.conv2d_6.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_6.bias', (32), 'float32')
        self.conv2d_6.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_6.weight', (32,32,1,1), 'float32')
        self.conv2d_7.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_7.bias', (64), 'float32')
        self.conv2d_7.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_7.weight', (64,32,3,3), 'float32')
        self.conv2d_8.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_8.bias', (32), 'float32')
        self.conv2d_8.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_8.weight', (32,64,1,1), 'float32')
        self.conv2d_9.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_9.bias', (32), 'float32')
        self.conv2d_9.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_9.weight', (32,32,1,1), 'float32')
        self.conv2d_10.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_10.bias', (32), 'float32')
        self.conv2d_10.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_10.weight', (32,32,3,3), 'float32')
        self.conv2d_11.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_11.bias', (32), 'float32')
        self.conv2d_11.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_11.weight', (32,32,1,1), 'float32')
        self.conv2d_12.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_12.bias', (32), 'float32')
        self.conv2d_12.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_12.weight', (32,32,3,3), 'float32')
        self.conv2d_13.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_13.bias', (32), 'float32')
        self.conv2d_13.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_13.weight', (32,64,1,1), 'float32')
        self.conv2d_14.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_14.bias', (64), 'float32')
        self.conv2d_14.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_14.weight', (64,64,1,1), 'float32')
        self.conv2d_15.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_15.bias', (128), 'float32')
        self.conv2d_15.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_15.weight', (128,64,3,3), 'float32')
        self.conv2d_16.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_16.bias', (64), 'float32')
        self.conv2d_16.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_16.weight', (64,128,1,1), 'float32')
        self.conv2d_17.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_17.bias', (64), 'float32')
        self.conv2d_17.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_17.weight', (64,64,1,1), 'float32')
        self.conv2d_18.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_18.bias', (64), 'float32')
        self.conv2d_18.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_18.weight', (64,64,3,3), 'float32')
        self.conv2d_19.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_19.bias', (64), 'float32')
        self.conv2d_19.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_19.weight', (64,64,1,1), 'float32')
        self.conv2d_20.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_20.bias', (64), 'float32')
        self.conv2d_20.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_20.weight', (64,64,3,3), 'float32')
        self.conv2d_21.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_21.bias', (64), 'float32')
        self.conv2d_21.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_21.weight', (64,64,1,1), 'float32')
        self.conv2d_22.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_22.bias', (64), 'float32')
        self.conv2d_22.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_22.weight', (64,64,3,3), 'float32')
        self.conv2d_23.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_23.bias', (64), 'float32')
        self.conv2d_23.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_23.weight', (64,128,1,1), 'float32')
        self.conv2d_24.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_24.bias', (128), 'float32')
        self.conv2d_24.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_24.weight', (128,128,1,1), 'float32')
        self.conv2d_25.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_25.bias', (256), 'float32')
        self.conv2d_25.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_25.weight', (256,128,3,3), 'float32')
        self.conv2d_26.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_26.bias', (128), 'float32')
        self.conv2d_26.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_26.weight', (128,256,1,1), 'float32')
        self.conv2d_27.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_27.bias', (128), 'float32')
        self.conv2d_27.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_27.weight', (128,128,1,1), 'float32')
        self.conv2d_28.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_28.bias', (128), 'float32')
        self.conv2d_28.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_28.weight', (128,128,3,3), 'float32')
        self.conv2d_29.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_29.bias', (128), 'float32')
        self.conv2d_29.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_29.weight', (128,256,1,1), 'float32')
        self.conv2d_30.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_30.bias', (256), 'float32')
        self.conv2d_30.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_30.weight', (256,256,1,1), 'float32')
        self.conv2d_31.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_31.bias', (128), 'float32')
        self.conv2d_31.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_31.weight', (128,256,1,1), 'float32')
        self.conv2d_32.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_32.bias', (256), 'float32')
        self.conv2d_32.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_32.weight', (256,512,1,1), 'float32')
        self.conv2d_33.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_33.bias', (128), 'float32')
        self.conv2d_33.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_33.weight', (128,256,1,1), 'float32')
        self.conv2d_34.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_34.bias', (64), 'float32')
        self.conv2d_34.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_34.weight', (64,256,1,1), 'float32')
        self.conv2d_35.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_35.bias', (64), 'float32')
        self.conv2d_35.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_35.weight', (64,64,1,1), 'float32')
        self.conv2d_36.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_36.bias', (64), 'float32')
        self.conv2d_36.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_36.weight', (64,64,3,3), 'float32')
        self.conv2d_37.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_37.bias', (64), 'float32')
        self.conv2d_37.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_37.weight', (64,256,1,1), 'float32')
        self.conv2d_38.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_38.bias', (128), 'float32')
        self.conv2d_38.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_38.weight', (128,128,1,1), 'float32')
        self.conv2d_39.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_39.bias', (64), 'float32')
        self.conv2d_39.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_39.weight', (64,128,1,1), 'float32')
        self.conv2d_40.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_40.bias', (32), 'float32')
        self.conv2d_40.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_40.weight', (32,128,1,1), 'float32')
        self.conv2d_41.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_41.bias', (32), 'float32')
        self.conv2d_41.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_41.weight', (32,32,1,1), 'float32')
        self.conv2d_42.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_42.bias', (32), 'float32')
        self.conv2d_42.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_42.weight', (32,32,3,3), 'float32')
        self.conv2d_43.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_43.bias', (32), 'float32')
        self.conv2d_43.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_43.weight', (32,128,1,1), 'float32')
        self.conv2d_44.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_44.bias', (64), 'float32')
        self.conv2d_44.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_44.weight', (64,64,1,1), 'float32')
        self.conv2d_45.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_45.bias', (64), 'float32')
        self.conv2d_45.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_45.weight', (64,64,3,3), 'float32')
        self.conv2d_46.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_46.bias', (64), 'float32')
        self.conv2d_46.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_46.weight', (64,128,1,1), 'float32')
        self.conv2d_47.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_47.bias', (64), 'float32')
        self.conv2d_47.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_47.weight', (64,64,1,1), 'float32')
        self.conv2d_48.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_48.bias', (64), 'float32')
        self.conv2d_48.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_48.weight', (64,64,3,3), 'float32')
        self.conv2d_49.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_49.bias', (64), 'float32')
        self.conv2d_49.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_49.weight', (64,128,1,1), 'float32')
        self.conv2d_50.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_50.bias', (128), 'float32')
        self.conv2d_50.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_50.weight', (128,128,1,1), 'float32')
        self.conv2d_51.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_51.bias', (128), 'float32')
        self.conv2d_51.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_51.weight', (128,128,3,3), 'float32')
        self.conv2d_52.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_52.bias', (128), 'float32')
        self.conv2d_52.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_52.weight', (128,256,1,1), 'float32')
        self.conv2d_53.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_53.bias', (128), 'float32')
        self.conv2d_53.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_53.weight', (128,128,1,1), 'float32')
        self.conv2d_54.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_54.bias', (128), 'float32')
        self.conv2d_54.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_54.weight', (128,128,3,3), 'float32')
        self.conv2d_55.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_55.bias', (128), 'float32')
        self.conv2d_55.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_55.weight', (128,256,1,1), 'float32')
        self.conv2d_56.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_56.bias', (256), 'float32')
        self.conv2d_56.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_56.weight', (256,256,1,1), 'float32')
        self.conv2d_57.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_57.bias', (21), 'float32')
        self.conv2d_57.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_57.weight', (21,64,1,1), 'float32')
        self.conv2d_58.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_58.bias', (21), 'float32')
        self.conv2d_58.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_58.weight', (21,128,1,1), 'float32')
        self.conv2d_59.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_59.bias', (21), 'float32')
        self.conv2d_59.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_59.weight', (21,256,1,1), 'float32')
        self._model_24_Constant_2_output_0_data = self.load_pnnx_bin_as_parameter(archive, '/model.24/Constant_2_output_0.data', (1,3,80,80,2,), 'float32')
        self._model_24_Constant_6_output_0_data = self.load_pnnx_bin_as_parameter(archive, '/model.24/Constant_6_output_0.data', (1,3,80,80,2,), 'float32')
        self._model_24_Constant_10_output_0_data = self.load_pnnx_bin_as_parameter(archive, '/model.24/Constant_10_output_0.data', (1,3,40,40,2,), 'float32')
        self._model_24_Constant_14_output_0_data = self.load_pnnx_bin_as_parameter(archive, '/model.24/Constant_14_output_0.data', (1,3,40,40,2,), 'float32')
        self._model_24_Constant_18_output_0_data = self.load_pnnx_bin_as_parameter(archive, '/model.24/Constant_18_output_0.data', (1,3,20,20,2,), 'float32')
        self._model_24_Constant_22_output_0_data = self.load_pnnx_bin_as_parameter(archive, '/model.24/Constant_22_output_0.data', (1,3,20,20,2,), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        fd, tmppath = tempfile.mkstemp()
        with os.fdopen(fd, 'wb') as tmpf, archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0):
        v_1 = self.conv2d_0(v_0)
        v_2 = F.silu(input=v_1)
        v_3 = self.conv2d_1(v_2)
        v_4 = F.silu(input=v_3)
        v_5 = self.conv2d_2(v_4)
        v_6 = F.silu(input=v_5)
        v_7 = self.conv2d_3(v_6)
        v_8 = F.silu(input=v_7)
        v_9 = self.conv2d_4(v_8)
        v_10 = F.sigmoid(input=v_9)
        v_11 = (v_6 + (v_9 * v_10))
        v_12 = self.conv2d_5(v_4)
        v_13 = F.silu(input=v_12)
        v_14 = torch.cat((v_11, v_13), dim=1)
        v_15 = self.conv2d_6(v_14)
        v_16 = F.silu(input=v_15)
        v_17 = self.conv2d_7(v_16)
        v_18 = F.silu(input=v_17)
        v_19 = self.conv2d_8(v_18)
        v_20 = F.silu(input=v_19)
        v_21 = self.conv2d_9(v_20)
        v_22 = F.silu(input=v_21)
        v_23 = self.conv2d_10(v_22)
        v_24 = F.sigmoid(input=v_23)
        v_25 = (v_20 + (v_23 * v_24))
        v_26 = self.conv2d_11(v_25)
        v_27 = F.silu(input=v_26)
        v_28 = self.conv2d_12(v_27)
        v_29 = F.sigmoid(input=v_28)
        v_30 = (v_25 + (v_28 * v_29))
        v_31 = self.conv2d_13(v_18)
        v_32 = F.silu(input=v_31)
        v_33 = torch.cat((v_30, v_32), dim=1)
        v_34 = self.conv2d_14(v_33)
        v_35 = F.silu(input=v_34)
        v_36 = self.conv2d_15(v_35)
        v_37 = F.silu(input=v_36)
        v_38 = self.conv2d_16(v_37)
        v_39 = F.silu(input=v_38)
        v_40 = self.conv2d_17(v_39)
        v_41 = F.silu(input=v_40)
        v_42 = self.conv2d_18(v_41)
        v_43 = F.sigmoid(input=v_42)
        v_44 = (v_39 + (v_42 * v_43))
        v_45 = self.conv2d_19(v_44)
        v_46 = F.silu(input=v_45)
        v_47 = self.conv2d_20(v_46)
        v_48 = F.sigmoid(input=v_47)
        v_49 = (v_44 + (v_47 * v_48))
        v_50 = self.conv2d_21(v_49)
        v_51 = F.silu(input=v_50)
        v_52 = self.conv2d_22(v_51)
        v_53 = F.sigmoid(input=v_52)
        v_54 = (v_49 + (v_52 * v_53))
        v_55 = self.conv2d_23(v_37)
        v_56 = F.silu(input=v_55)
        v_57 = torch.cat((v_54, v_56), dim=1)
        v_58 = self.conv2d_24(v_57)
        v_59 = F.silu(input=v_58)
        v_60 = self.conv2d_25(v_59)
        v_61 = F.silu(input=v_60)
        v_62 = self.conv2d_26(v_61)
        v_63 = F.silu(input=v_62)
        v_64 = self.conv2d_27(v_63)
        v_65 = F.silu(input=v_64)
        v_66 = self.conv2d_28(v_65)
        v_67 = F.sigmoid(input=v_66)
        v_68 = (v_63 + (v_66 * v_67))
        v_69 = self.conv2d_29(v_61)
        v_70 = F.silu(input=v_69)
        v_71 = torch.cat((v_68, v_70), dim=1)
        v_72 = self.conv2d_30(v_71)
        v_73 = F.silu(input=v_72)
        v_74 = self.conv2d_31(v_73)
        v_75 = F.silu(input=v_74)
        v_76 = F.max_pool2d(input=v_75, ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        v_77 = F.max_pool2d(input=v_76, ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        v_78 = F.max_pool2d(input=v_77, ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        v_79 = torch.cat((v_75, v_76, v_77, v_78), dim=1)
        v_80 = self.conv2d_32(v_79)
        v_81 = F.silu(input=v_80)
        v_82 = self.conv2d_33(v_81)
        v_83 = F.silu(input=v_82)
        v_84 = F.interpolate(input=v_83, mode='nearest', recompute_scale_factor=False, scale_factor=(2.0,2.0))
        v_85 = torch.cat((v_84, v_59), dim=1)
        v_86 = self.conv2d_34(v_85)
        v_87 = F.silu(input=v_86)
        v_88 = self.conv2d_35(v_87)
        v_89 = F.silu(input=v_88)
        v_90 = self.conv2d_36(v_89)
        v_91 = F.silu(input=v_90)
        v_92 = self.conv2d_37(v_85)
        v_93 = F.silu(input=v_92)
        v_94 = torch.cat((v_91, v_93), dim=1)
        v_95 = self.conv2d_38(v_94)
        v_96 = F.silu(input=v_95)
        v_97 = self.conv2d_39(v_96)
        v_98 = F.silu(input=v_97)
        v_99 = F.interpolate(input=v_98, mode='nearest', recompute_scale_factor=False, scale_factor=(2.0,2.0))
        v_100 = torch.cat((v_99, v_35), dim=1)
        v_101 = self.conv2d_40(v_100)
        v_102 = F.silu(input=v_101)
        v_103 = self.conv2d_41(v_102)
        v_104 = F.silu(input=v_103)
        v_105 = self.conv2d_42(v_104)
        v_106 = F.silu(input=v_105)
        v_107 = self.conv2d_43(v_100)
        v_108 = F.silu(input=v_107)
        v_109 = torch.cat((v_106, v_108), dim=1)
        v_110 = self.conv2d_44(v_109)
        v_111 = F.silu(input=v_110)
        v_112 = self.conv2d_45(v_111)
        v_113 = F.silu(input=v_112)
        v_114 = torch.cat((v_113, v_98), dim=1)
        v_115 = self.conv2d_46(v_114)
        v_116 = F.silu(input=v_115)
        v_117 = self.conv2d_47(v_116)
        v_118 = F.silu(input=v_117)
        v_119 = self.conv2d_48(v_118)
        v_120 = F.silu(input=v_119)
        v_121 = self.conv2d_49(v_114)
        v_122 = F.silu(input=v_121)
        v_123 = torch.cat((v_120, v_122), dim=1)
        v_124 = self.conv2d_50(v_123)
        v_125 = F.silu(input=v_124)
        v_126 = self.conv2d_51(v_125)
        v_127 = F.silu(input=v_126)
        v_128 = torch.cat((v_127, v_83), dim=1)
        v_129 = self.conv2d_52(v_128)
        v_130 = F.silu(input=v_129)
        v_131 = self.conv2d_53(v_130)
        v_132 = F.silu(input=v_131)
        v_133 = self.conv2d_54(v_132)
        v_134 = F.silu(input=v_133)
        v_135 = self.conv2d_55(v_128)
        v_136 = F.silu(input=v_135)
        v_137 = torch.cat((v_134, v_136), dim=1)
        v_138 = self.conv2d_56(v_137)
        v_139 = F.silu(input=v_138)
        v_140 = self.conv2d_57(v_111)
        v_141 = v_140.reshape(1, 3, 7, 80, 80)
        v_142 = v_141.permute(dims=(0,1,3,4,2))
        v_143 = F.sigmoid(input=v_142)
        v_144, v_145, v_146 = torch.split(tensor=v_143, dim=4, split_size_or_sections=(2,2,3))
        v_147 = self._model_24_Constant_2_output_0_data
        v_148 = (((v_144 * 2.000000) + v_147) * 8.000000)
        v_149 = self._model_24_Constant_6_output_0_data
        v_150 = (torch.pow((v_145 * 2.000000), 2.000000) * v_149)
        v_151 = torch.cat((v_148, v_150, v_146), dim=4)
        v_152 = v_151.reshape(1, 19200, 7)
        v_153 = self.conv2d_58(v_125)
        v_154 = v_153.reshape(1, 3, 7, 40, 40)
        v_155 = v_154.permute(dims=(0,1,3,4,2))
        v_156 = F.sigmoid(input=v_155)
        v_157, v_158, v_159 = torch.split(tensor=v_156, dim=4, split_size_or_sections=(2,2,3))
        v_160 = self._model_24_Constant_10_output_0_data
        v_161 = (((v_157 * 2.000000) + v_160) * 16.000000)
        v_162 = self._model_24_Constant_14_output_0_data
        v_163 = (torch.pow((v_158 * 2.000000), 2.000000) * v_162)
        v_164 = torch.cat((v_161, v_163, v_159), dim=4)
        v_165 = v_164.reshape(1, 4800, 7)
        v_166 = self.conv2d_59(v_139)
        v_167 = v_166.reshape(1, 3, 7, 20, 20)
        v_168 = v_167.permute(dims=(0,1,3,4,2))
        v_169 = F.sigmoid(input=v_168)
        v_170, v_171, v_172 = torch.split(tensor=v_169, dim=4, split_size_or_sections=(2,2,3))
        v_173 = self._model_24_Constant_18_output_0_data
        v_174 = (((v_170 * 2.000000) + v_173) * 32.000000)
        v_175 = self._model_24_Constant_22_output_0_data
        v_176 = (torch.pow((v_171 * 2.000000), 2.000000) * v_175)
        v_177 = torch.cat((v_174, v_176, v_172), dim=4)
        v_178 = v_177.reshape(1, 1200, 7)
        v_179 = torch.cat((v_152, v_165, v_178), dim=1)
        return v_179

def export_torchscript():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 640, 640, dtype=torch.float)

    mod = torch.jit.trace(net, v_0)
    mod.save(".\best_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 640, 640, dtype=torch.float)

    torch.onnx.export(net, v_0, ".\best_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0'], output_names=['out0'])

def test_inference():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 640, 640, dtype=torch.float)

    return net(v_0)

if __name__ == "__main__":
    print(test_inference())
